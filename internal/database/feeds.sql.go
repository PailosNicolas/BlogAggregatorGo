// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: feeds.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds (id, created_at, updated_at, name, url, user_id)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, url, user_id, created_at, updated_at
`

type CreateFeedParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Url       string
	UserID    uuid.UUID
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Url,
		arg.UserID,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFeedFollowByID = `-- name: DeleteFeedFollowByID :exec
DELETE FROM feeds_users
WHERE id = $1 AND user_id = $2
`

type DeleteFeedFollowByIDParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteFeedFollowByID(ctx context.Context, arg DeleteFeedFollowByIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollowByID, arg.ID, arg.UserID)
	return err
}

const followByFeedId = `-- name: FollowByFeedId :one
INSERT INTO feeds_users (id, feed_id, user_id, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, feed_id, user_id, created_at, updated_at
`

type FollowByFeedIdParams struct {
	ID        uuid.UUID
	FeedID    uuid.UUID
	UserID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) FollowByFeedId(ctx context.Context, arg FollowByFeedIdParams) (FeedsUser, error) {
	row := q.db.QueryRowContext(ctx, followByFeedId,
		arg.ID,
		arg.FeedID,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i FeedsUser
	err := row.Scan(
		&i.ID,
		&i.FeedID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllFeedFollowByUserId = `-- name: GetAllFeedFollowByUserId :many
SELECT id, feed_id, user_id, created_at, updated_at FROM feeds_users
WHERE user_id = $1
`

func (q *Queries) GetAllFeedFollowByUserId(ctx context.Context, userID uuid.UUID) ([]FeedsUser, error) {
	rows, err := q.db.QueryContext(ctx, getAllFeedFollowByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedsUser
	for rows.Next() {
		var i FeedsUser
		if err := rows.Scan(
			&i.ID,
			&i.FeedID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllFeeds = `-- name: GetAllFeeds :many
SELECT id, name, url, user_id, created_at, updated_at FROM feeds
`

func (q *Queries) GetAllFeeds(ctx context.Context) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, getAllFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Url,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeedById = `-- name: GetFeedById :one
SELECT id, name, url, user_id, created_at, updated_at FROM feeds
WHERE id = $1
`

func (q *Queries) GetFeedById(ctx context.Context, id uuid.UUID) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeedById, id)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFeedFollowById = `-- name: GetFeedFollowById :one
SELECT id, feed_id, user_id, created_at, updated_at FROM feeds_users
WHERE id = $1
`

func (q *Queries) GetFeedFollowById(ctx context.Context, id uuid.UUID) (FeedsUser, error) {
	row := q.db.QueryRowContext(ctx, getFeedFollowById, id)
	var i FeedsUser
	err := row.Scan(
		&i.ID,
		&i.FeedID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
